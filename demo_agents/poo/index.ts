/**
 * Agent: poo
 * Prompt: fizzbuzz solver
 * 
 * This code was generated by AI using Wandb + Daytona
 * Model: Qwen/Qwen3-Coder-480B-A35B-Instruct
 * Generated: 2025-10-12T17:23:20.923Z
 * Attempts: 1
 */

/**
 * Solves the FizzBuzz problem for numbers from 1 to n.
 * 
 * Rules:
 * - For numbers divisible by 3, returns 'Fizz'
 * - For numbers divisible by 5, returns 'Buzz'
 * - For numbers divisible by both 3 and 5, returns 'FizzBuzz'
 * - Otherwise returns the number as a string
 * 
 * @param n - A positive integer representing the upper limit (inclusive)
 * @returns An array of strings following the FizzBuzz rules
 * @throws Error if input is not a positive integer
 * 
 * @example
 * fizzBuzz(3) // Returns ['1', '2', 'Fizz']
 * @example
 * fizzBuzz(5) // Returns ['1', '2', 'Fizz', '4', 'Buzz']
 * @example
 * fizzBuzz(15) // Returns ['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz']
 */
function fizzBuzz(n: number): string[] {
  // Input validation
  if (!Number.isInteger(n)) {
    throw new Error('Input must be an integer');
  }
  
  if (n <= 0) {
    throw new Error('Input must be a positive integer');
  }
  
  const result: string[] = [];
  
  for (let i = 1; i <= n; i++) {
    if (i % 15 === 0) { // Divisible by both 3 and 5
      result.push('FizzBuzz');
    } else if (i % 3 === 0) { // Divisible by 3
      result.push('Fizz');
    } else if (i % 5 === 0) { // Divisible by 5
      result.push('Buzz');
    } else {
      result.push(i.toString());
    }
  }
  
  return result;
}

// Unit tests
try {
  // Test basic functionality
  console.log('=== FizzBuzz Unit Tests ===');
  
  // Test case 1: Basic test with n=3
  const test1 = fizzBuzz(3);
  console.log(JSON.stringify({
    test: 'fizzBuzz(3)',
    expected: ['1', '2', 'Fizz'],
    actual: test1,
    passed: JSON.stringify(test1) === JSON.stringify(['1', '2', 'Fizz'])
  }));
  
  // Test case 2: Basic test with n=5
  const test2 = fizzBuzz(5);
  console.log(JSON.stringify({
    test: 'fizzBuzz(5)',
    expected: ['1', '2', 'Fizz', '4', 'Buzz'],
    actual: test2,
    passed: JSON.stringify(test2) === JSON.stringify(['1', '2', 'Fizz', '4', 'Buzz'])
  }));
  
  // Test case 3: Test with n=15 (includes FizzBuzz)
  const test3 = fizzBuzz(15);
  console.log(JSON.stringify({
    test: 'fizzBuzz(15)',
    expected: ['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz'],
    actual: test3,
    passed: JSON.stringify(test3) === JSON.stringify(['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz'])
  }));
  
  // Test case 4: Edge case with n=1
  const test4 = fizzBuzz(1);
  console.log(JSON.stringify({
    test: 'fizzBuzz(1)',
    expected: ['1'],
    actual: test4,
    passed: JSON.stringify(test4) === JSON.stringify(['1'])
  }));
  
  // Test error cases
  console.log('\n=== Error Handling Tests ===');
  
  // Test case 5: Zero input
  try {
    fizzBuzz(0);
    console.log(JSON.stringify({
      test: 'fizzBuzz(0)',
      expected: 'Error',
      actual: 'No error thrown',
      passed: false
    }));
  } catch (error) {
    const err = error as Error;
    console.log(JSON.stringify({
      test: 'fizzBuzz(0)',
      expected: 'Error',
      actual: err.message,
      passed: err.message === 'Input must be a positive integer'
    }));
  }
  
  // Test case 6: Negative input
  try {
    fizzBuzz(-5);
    console.log(JSON.stringify({
      test: 'fizzBuzz(-5)',
      expected: 'Error',
      actual: 'No error thrown',
      passed: false
    }));
  } catch (error) {
    const err = error as Error;
    console.log(JSON.stringify({
      test: 'fizzBuzz(-5)',
      expected: 'Error',
      actual: err.message,
      passed: err.message === 'Input must be a positive integer'
    }));
  }
  
  // Test case 7: Non-integer input
  try {
    fizzBuzz(3.5);
    console.log(JSON.stringify({
      test: 'fizzBuzz(3.5)',
      expected: 'Error',
      actual: 'No error thrown',
      passed: false
    }));
  } catch (error) {
    const err = error as Error;
    console.log(JSON.stringify({
      test: 'fizzBuzz(3.5)',
      expected: 'Error',
      actual: err.message,
      passed: err.message === 'Input must be an integer'
    }));
  }
  
  // Test case 8: Large number test
  const largeTest = fizzBuzz(20);
  const expectedAtIndex14 = largeTest[14] === 'FizzBuzz'; // 15th element (index 14) should be FizzBuzz
  const expectedAtIndex17 = largeTest[17] === 'Fizz'; // 18th element (index 17) should be Fizz
  console.log(JSON.stringify({
    test: 'fizzBuzz(20) verification',
    description: 'Check positions 15 and 18',
    expected: 'Index 14=FizzBuzz, Index 17=Fizz',
    actual: `Index 14=${largeTest[14]}, Index 17=${largeTest[17]}`,
    passed: expectedAtIndex14 && expectedAtIndex17
  }));
  
  console.log('\n=== All Tests Completed ===');
  
} catch (error: unknown) {
  const err = error as Error;
  console.log(JSON.stringify({
    success: false,
    error: err.message,
    timestamp: new Date().toISOString()
  }));
}