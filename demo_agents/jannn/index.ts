/**
 * Agent: jannn
 * Prompt: An agent that can solve fizzbuzz
 * 
 * This code was generated by AI using Wandb + Daytona
 * Model: Qwen/Qwen3-Coder-480B-A35B-Instruct
 * Generated: 2025-10-12T17:38:16.616Z
 * Attempts: 1
 */

/**
 * Solves the classic FizzBuzz problem.
 * 
 * For numbers from 1 to n:
 * - If divisible by both 3 and 5, returns 'FizzBuzz'
 * - If divisible by 3, returns 'Fizz'
 * - If divisible by 5, returns 'Buzz'
 * - Otherwise, returns the number as a string
 * 
 * @param n - The upper limit (inclusive) for generating FizzBuzz sequence
 * @returns An array of strings representing the FizzBuzz sequence
 * @throws Error if n is not a finite number
 */
function fizzBuzz(n: number): string[] {
  // Validate input
  if (!Number.isFinite(n)) {
    throw new Error('Input must be a finite number');
  }

  // Handle edge case where n <= 0
  if (n <= 0) {
    return [];
  }

  const result: string[] = [];

  for (let i = 1; i <= n; i++) {
    if (i % 15 === 0) { // Divisible by both 3 and 5
      result.push('FizzBuzz');
    } else if (i % 3 === 0) { // Divisible by 3
      result.push('Fizz');
    } else if (i % 5 === 0) { // Divisible by 5
      result.push('Buzz');
    } else { // Not divisible by either
      result.push(i.toString());
    }
  }

  return result;
}

// Export as default for module usage
export default fizzBuzz;

// Test the function
try {
  const testCases = [5, 15, 0, -1, 1];
  
  testCases.forEach(testCase => {
    const result = fizzBuzz(testCase);
    console.log(JSON.stringify({
      input: testCase,
      output: result,
      timestamp: new Date().toISOString()
    }));
  });
} catch (error: unknown) {
  const err = error as Error;
  console.log(JSON.stringify({
    success: false,
    error: err.message,
    timestamp: new Date().toISOString()
  }));
}