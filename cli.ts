#!/usr/bin/env -S deno run --allow-read --allow-write --allow-env --allow-net

/**
 * AgFactory CLI - Deno Version
 * Create AI agents with custom prompts (with optional AI code generation)
 */

import { parse } from "https://deno.land/std@0.208.0/flags/mod.ts";
import { exists } from "https://deno.land/std@0.208.0/fs/mod.ts";
import { join } from "https://deno.land/std@0.208.0/path/mod.ts";
import { run as orchestratorRun } from "./backend/fbi.ts";

// ============================================================================
// ANSI Colors (replacing chalk)
// ============================================================================

const colors = {
  reset: "\x1b[0m",
  cyan: "\x1b[36m",
  green: "\x1b[32m",
  yellow: "\x1b[33m",
  red: "\x1b[31m",
  blue: "\x1b[34m",
  gray: "\x1b[90m",
  bold: "\x1b[1m",
};

function colorize(text: string, color: keyof typeof colors): string {
  return `${colors[color]}${text}${colors.reset}`;
}

// ============================================================================
// Banner (replacing figlet)
// ============================================================================

function displayBanner(): void {
  const banner = `
   ___        ______         _                   
  / _ \\      |  ____|       | |                  
 / /_\\ \\ __ _| |__ __ _  ___| |_ ___  _ __ _   _ 
 |  _  |/ _\` |  __/ _\` |/ __| __/ _ \\| '__| | | |
 | | | | (_| | | | (_| | (__| || (_) | |  | |_| |
 \\_| |_/\\__, |_|  \\__,_|\\___|\\__\\___/|_|   \\__, |
         __/ |                              __/ |
        |___/                              |___/ 
  `;
  
  console.clear();
  console.log(colorize(banner, "cyan"));
  console.log(colorize("  Agentic agent factory", "gray"));
  console.log(colorize("  Version: 1.0.0\n", "gray"));
}

// ============================================================================
// Input Utilities (replacing inquirer)
// ============================================================================

async function prompt(message: string): Promise<string> {
  console.log(colorize(message, "yellow"));
  const buf = new Uint8Array(1024);
  const n = await Deno.stdin.read(buf);
  if (n === null) return "";
  return new TextDecoder().decode(buf.subarray(0, n)).trim();
}

async function select(message: string, choices: string[]): Promise<string> {
  console.log(colorize(`\n${message}`, "yellow"));
  choices.forEach((choice, idx) => {
    console.log(colorize(`  ${idx + 1}. ${choice}`, "blue"));
  });
  const answer = await prompt(colorize("Enter your choice (number): ", "yellow"));
  const idx = parseInt(answer) - 1;
  if (idx >= 0 && idx < choices.length) {
    return choices[idx];
  }
  console.log(colorize("Invalid choice, please try again.", "red"));
  return await select(message, choices);
}

// ============================================================================
// Agent Generation
// ============================================================================

function generateSimpleAgentCode(name: string, promptText?: string): string {
  const promptComment = promptText 
    ? `/**
 * Agent: ${name}
 * Prompt: ${promptText}
 */

` 
    : `/**
 * Agent: ${name}
 */

`;

  return `${promptComment}function main(): void {
  console.log('Hello World');
  console.log('Agent "${name}" is running!');
  ${promptText ? `console.log('Prompt: ${promptText}');` : ''}
}

main();
`;
}

function formatAIGeneratedCode(name: string, promptText: string, generatedCode: string, metadata: any): string {
  const header = `/**
 * Agent: ${name}
 * Prompt: ${promptText}
 * 
 * This code was generated by AI using Wandb + Daytona
 * Model: ${metadata.model || 'Unknown'}
 * Generated: ${new Date().toISOString()}
 * Attempts: ${metadata.attempts || 1}
 */

`;

  return header + generatedCode;
}

async function createAgentWithAI(name: string, promptText: string): Promise<void> {
  console.log(colorize(`\nü§ñ Creating agent: ${colorize(name, "bold")}`, "green"));
  console.log(colorize(`üí¨ Prompt: ${colorize(promptText, "bold")}`, "blue"));
  console.log(colorize('\n‚è≥ Calling FBI orchestrator (AI code generation + execution)...\n', "cyan"));
  
  try {
    // Call the FBI orchestrator (generation + execution)
    const result = await orchestratorRun(promptText, {
      maxRetries: 3,
      logCallback: (log) => {
        // Show important log messages
        if (log.level === 'error' || log.level === 'warning') {
          const icon = log.level === 'error' ? '‚ùå' : '‚ö†Ô∏è';
          console.log(colorize(`   ${icon} ${log.message}`, log.level === 'error' ? 'red' : 'yellow'));
        }
      }
    });
    
    if (!result.success) {
      throw new Error(
        result.execution.hasError 
          ? `Execution failed: ${result.execution.errorType}` 
          : 'Code generation failed'
      );
    }
    
    console.log(colorize('\n‚úÖ AI code generation and validation successful!', "green"));
    console.log(colorize('üìù Generated code preview:', "gray"));
    console.log(colorize('‚îÄ'.repeat(60), "gray"));
    console.log(result.generation.code.substring(0, 300) + (result.generation.code.length > 300 ? '...' : ''));
    console.log(colorize('‚îÄ'.repeat(60), "gray"));
    
    if (result.execution.parsedOutput) {
      console.log(colorize('‚úÖ Execution validated:', "green"));
      console.log(colorize(`   ${JSON.stringify(result.execution.parsedOutput, null, 2)}`, "gray"));
    }
    
    // Create agents directory if it doesn't exist
    const agentsDir = join(Deno.cwd(), "agents");
    if (!(await exists(agentsDir))) {
      await Deno.mkdir(agentsDir, { recursive: true });
      console.log(colorize(`\n   üìÅ Created agents directory`, "gray"));
    }

    // Create agent-specific directory
    const agentDir = join(agentsDir, name);
    if (await exists(agentDir)) {
      console.log(colorize(`   ‚ö†Ô∏è  Agent "${name}" already exists, overwriting...`, "yellow"));
    } else {
      await Deno.mkdir(agentDir, { recursive: true });
    }

    // Format and save the generated code
    const agentCode = formatAIGeneratedCode(name, promptText, result.generation.code, {
      model: result.generation.model,
      attempts: result.generation.attempts
    });
    const agentFilePath = join(agentDir, "index.ts");
    await Deno.writeTextFile(agentFilePath, agentCode);
    
    // Also save the full orchestration metadata
    const metadataPath = join(agentDir, "generation-metadata.json");
    await Deno.writeTextFile(metadataPath, JSON.stringify({
      name,
      prompt: promptText,
      model: result.generation.model,
      attempts: result.generation.attempts,
      generatedAt: new Date().toISOString(),
      rawResponse: result.generation.rawResponse,
      execution: {
        success: result.execution.success,
        errorType: result.execution.errorType,
        parsedOutput: result.execution.parsedOutput
      },
      duration: result.duration
    }, null, 2));

    console.log(colorize(`\n   ‚ú® AI-generated agent created at: ${colorize(`agents/${name}/index.ts`, "bold")}`, "green"));
    console.log(colorize(`   üìã Metadata saved at: ${colorize(`agents/${name}/generation-metadata.json`, "bold")}`, "gray"));
    console.log(colorize(`   ‚è±Ô∏è  Duration: ${result.duration.total}ms (gen: ${result.duration.generation}ms, exec: ${result.duration.execution}ms)`, "gray"));
    console.log(colorize(`\n   Run it with: ${colorize(`deno run agents/${name}/index.ts`, "bold")}`, "gray"));
    console.log(colorize('\n   Done! ‚ú®\n', "green"));
    
  } catch (error) {
    const err = error as Error;
    console.log(colorize(`\n‚ùå AI code generation failed: ${err.message}`, "red"));
    console.log(colorize('\nüí° Tip: Make sure you have set WANDB_API_KEY and DAYTONA_API_KEY in .env', "yellow"));
    console.log(colorize('    Falling back to simple template...\n', "gray"));
    
    // Fallback to simple generation
    await createAgentSimple(name, promptText);
  }
}

async function createAgentSimple(name: string, promptText?: string): Promise<void> {
  console.log(colorize(`\n‚úÖ Creating simple agent: ${colorize(name, "bold")}`, "green"));
  
  if (promptText) {
    console.log(colorize(`üí¨ Prompt: ${colorize(promptText, "bold")}`, "blue"));
  }

  // Create agents directory if it doesn't exist
  const agentsDir = join(Deno.cwd(), "agents");
  if (!(await exists(agentsDir))) {
    await Deno.mkdir(agentsDir, { recursive: true });
    console.log(colorize(`   üìÅ Created agents directory`, "gray"));
  }

  // Create agent-specific directory
  const agentDir = join(agentsDir, name);
  if (await exists(agentDir)) {
    console.log(colorize(`   ‚ö†Ô∏è  Agent "${name}" already exists, overwriting...`, "yellow"));
  } else {
    await Deno.mkdir(agentDir, { recursive: true });
  }

  // Generate the agent TypeScript file
  const agentCode = generateSimpleAgentCode(name, promptText);
  const agentFilePath = join(agentDir, "index.ts");
  await Deno.writeTextFile(agentFilePath, agentCode);

  console.log(colorize(`   ‚ú® Agent created at: ${colorize(`agents/${name}/index.ts`, "bold")}`, "green"));
  console.log(colorize(`\n   Run it with: ${colorize(`deno run agents/${name}/index.ts`, "bold")}`, "gray"));
  console.log(colorize('\n   Done! ‚ú®\n', "green"));
}

// ============================================================================
// Interactive Mode
// ============================================================================

async function startInteractiveMode(): Promise<void> {
  displayBanner();

  console.log(colorize('üöÄ Welcome to AgFactory CLI!\n', "cyan"));
  console.log(colorize('Create AI agents with custom prompts\n', "gray"));

  let continueLoop = true;

  while (continueLoop) {
    const action = await select(
      'What would you like to do?',
      ['ü§ñ Create an Agent (AI-powered)', 'üìù Create an Agent (Simple template)', '‚ùå Exit']
    );

    if (action.includes('AI-powered')) {
      console.log(); // Empty line for spacing
      
      // Get agent name
      const name = await prompt('Enter the agent name:');
      if (name.trim().length === 0) {
        console.log(colorize('Agent name cannot be empty!', "red"));
        continue;
      }

      // Get agent prompt
      const promptText = await prompt('Enter what you want the agent to do:');
      if (promptText.trim().length === 0) {
        console.log(colorize('Prompt cannot be empty!', "red"));
        continue;
      }

      await createAgentWithAI(name, promptText);
      console.log(colorize('‚îÄ'.repeat(50) + '\n', "gray"));
      
    } else if (action.includes('Simple template')) {
      console.log(); // Empty line for spacing
      
      // Get agent name
      const name = await prompt('Enter the agent name:');
      if (name.trim().length === 0) {
        console.log(colorize('Agent name cannot be empty!', "red"));
        continue;
      }

      // Get agent prompt
      const promptText = await prompt('Enter the agent prompt (optional):');

      await createAgentSimple(name, promptText || undefined);
      console.log(colorize('‚îÄ'.repeat(50) + '\n', "gray"));
      
    } else if (action.includes('Exit')) {
      console.log(colorize('\nüëã Thanks for using AgFactory CLI! Goodbye!\n', "cyan"));
      continueLoop = false;
    }
  }
}

// ============================================================================
// Command Line Handler
// ============================================================================

async function handleCommandLine(args: string[]): Promise<void> {
  const flags = parse(args, {
    string: ["prompt", "p"],
    boolean: ["ai", "simple"],
    alias: { p: "prompt" },
    default: { ai: false, simple: false }
  });

  const command = flags._[0]?.toString();
  
  if (command === "create") {
    const name = flags._[1]?.toString();
    
    if (!name) {
      console.log(colorize('‚ùå Error: Agent name is required', "red"));
      console.log(colorize('Usage: deno task cli:create <name> --prompt "Your prompt" [--ai|--simple]', "gray"));
      Deno.exit(1);
    }

    const promptText = flags.prompt?.toString();
    
    if (!promptText) {
      console.log(colorize('‚ùå Error: Prompt is required', "red"));
      console.log(colorize('Usage: deno task cli:create <name> --prompt "Your prompt" [--ai|--simple]', "gray"));
      Deno.exit(1);
    }
    
    // Determine generation method
    if (flags.ai) {
      await createAgentWithAI(name, promptText);
    } else if (flags.simple) {
      await createAgentSimple(name, promptText);
    } else {
      // Default to AI generation
      console.log(colorize('üí° Using AI generation (use --simple for template-only)', "gray"));
      await createAgentWithAI(name, promptText);
    }
  } else if (command === "help" || command === "--help" || command === "-h") {
    displayHelp();
  } else {
    // No command or unknown command - start interactive mode
    await startInteractiveMode();
  }
}

function displayHelp(): void {
  console.log(colorize('\nAgFactory CLI - AI-Powered Agent Factory\n', "cyan"));
  console.log(colorize('Usage:', "yellow"));
  console.log('  deno task cli                                    # Interactive mode');
  console.log('  deno task cli:create <name> -p "prompt" [flags]  # Command line mode\n');
  console.log(colorize('Commands:', "yellow"));
  console.log('  create <name>           Create a new agent');
  console.log('  help                    Show this help message\n');
  console.log(colorize('Options:', "yellow"));
  console.log('  -p, --prompt <text>     Agent prompt/instructions (required)');
  console.log('  --ai                    Use AI code generation (default)');
  console.log('  --simple                Use simple template (no AI)\n');
  console.log(colorize('Examples:', "yellow"));
  console.log('  # Interactive mode (recommended)');
  console.log('  deno task cli\n');
  console.log('  # AI-powered generation (default)');
  console.log('  deno task cli:create calculator -p "Create a calculator that adds two numbers"\n');
  console.log('  # Simple template');
  console.log('  deno task cli:create hello --simple -p "Say hello"\n');
  console.log(colorize('Requirements for AI generation:', "yellow"));
  console.log('  - WANDB_API_KEY in .env (for code generation)');
  console.log('  - DAYTONA_API_KEY in .env (for code validation)\n');
}

// ============================================================================
// Main Entry Point
// ============================================================================

if (import.meta.main) {
  const args = Deno.args;
  await handleCommandLine(args);
}

