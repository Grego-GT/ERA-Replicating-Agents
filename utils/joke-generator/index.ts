/**
 * Agent: joke-generator
 * Prompt: make a test joke generator
 * 
 * This code was generated by AI using Wandb + Daytona
 * Model: Qwen/Qwen3-Coder-480B-A35B-Instruct
 * Generated: 2025-10-12T16:05:23.170Z
 * Attempts: 1
 */

(async () => {
  const { execSync } = require('child_process');
  
  // Install dependencies
  execSync('npm install node-fetch@2 weave', { stdio: 'pipe' });
  
  // === Wandb Chat Utility (Auto-injected) ===
async function wandbChat(userMessage: string, options: any = {}): Promise<string> {
  const fetch = require('node-fetch');
  const apiKey = process.env.WANDB_API_KEY;
  
  if (!apiKey) {
    throw new Error('WANDB_API_KEY not found in environment');
  }
  
  const body: any = {
    model: options.model || 'Qwen/Qwen3-Coder-480B-A35B-Instruct',
    messages: [{ role: 'user', content: userMessage }],
  };
  
  // Add optional parameters
  if (options.temperature !== undefined) body.temperature = options.temperature;
  if (options.maxTokens !== undefined) body.max_tokens = options.maxTokens;
  if (options.systemPrompt !== undefined) {
    body.messages = [
      { role: 'system', content: options.systemPrompt },
      { role: 'user', content: userMessage }
    ];
  }
  
  const response = await fetch('https://api.inference.wandb.ai/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${apiKey}`
    },
    body: JSON.stringify(body)
  });
  
  if (!response.ok) {
    const errorText = await response.text();
    throw new Error(`Wandb API error (${response.status}): ${errorText}`);
  }
  
  const data = await response.json();
  return data.choices[0].message.content;
}
// === End Wandb Utility ===

// === Weave Tracing Utility (Auto-injected) ===
const weave = require('weave');

// Track initialization state
let weaveInitialized = false;

/**
 * Initialize Weave tracing
 * Call this once at the start of your code
 */
async function initWeave(projectName: string = 'agent-code'): Promise<void> {
  if (weaveInitialized) {
    return;
  }
  
  try {
    await weave.init(projectName);
    weaveInitialized = true;
    console.log(`[Weave] Initialized project: ${projectName}`);
  } catch (error: unknown) {
    const err = error as Error;
    console.warn('[Weave] Failed to initialize:', err.message);
    // Continue without tracing if init fails
  }
}

/**
 * Wrap a function with Weave tracing
 * This creates a traced version of your function
 */
function traceFunction(fn: any, name?: string): any {
  if (!name) name = fn.name || 'anonymous';
  
  try {
    return weave.op(fn);
  } catch (error: unknown) {
    const err = error as Error;
    console.warn(`[Weave] Failed to trace function ${name}:, err.message`);
    // Return original function if tracing fails
    return fn;
  }
}

/**
 * Create a traced async operation
 * Use this for important operations you want to observe
 * 
 * IMPORTANT: Use descriptive, namespaced operation names for clarity in traces
 * Good examples: 'agent:fetch_joke', 'agent:generate_response', 'agent:validate_input'
 * Bad examples: 'process', 'handle', 'run'
 */
function createTracedOp(operationName: string, fn: any): any {
  const namedFn = {
    [operationName]: async function(...args: any[]) {
      const startTime = Date.now();
      console.log(`[Weave] Starting: ${operationName}`);
      
      try {
        const result = await fn(...args);
        const duration = Date.now() - startTime;
        console.log(`[Weave] Completed: ${operationName} (${duration}ms)`);
        return result;
      } catch (error: unknown) {
        const err = error as Error;
        const duration = Date.now() - startTime;
        console.log(`[Weave] Failed: ${operationName} (${duration}ms) - ${err.message}`);
        throw error;
      }
    }
  }[operationName];
  
  return traceFunction(namedFn, operationName);
}
// === End Weave Utility ===
  
  // === User's Generated Code ===
  (async () => {
  try {
    // Initialize Weave tracing
    await initWeave('joke-generator');
  } catch (error: unknown) {
    // Silently ignore weave initialization failures as they're expected in this environment
  }

  /**
   * Generates a joke about a specific topic using LLM inference with comprehensive tracing
   * @param topic - The subject matter for the joke (must be a non-empty string)
   * @returns A structured response containing the joke or error information
   */
  const generateJoke = createTracedOp('joke-generator:validate_topic', async (topic: string) => {
    // Validate input
    if (!topic || typeof topic !== 'string' || topic.trim().length === 0) {
      return {
        success: false,
        error: 'Topic must be a non-empty string',
        timestamp: new Date().toISOString()
      };
    }

    try {
      // Generate joke using wandbChat
      const generateJokeOp = createTracedOp('joke-generator:generate_joke', async (validatedTopic: string) => {
        const joke = await wandbChat(`Tell me a joke about ${validatedTopic}`, {
          temperature: 0.7,
          maxTokens: 150
        });
        return joke;
      });

      const joke = await generateJokeOp(topic);

      // Format response
      const formatResponse = createTracedOp('joke-generator:format_response', async (jokeText: string) => {
        return {
          success: true,
          joke: jokeText.trim(),
          timestamp: new Date().toISOString()
        };
      });

      return await formatResponse(joke);
    } catch (error: unknown) {
      const err = error as Error;
      return {
        success: false,
        error: `Failed to generate joke: ${err.message}`,
        timestamp: new Date().toISOString()
      };
    }
  });

  // Export the function by attaching it to globalThis
  (globalThis as any).generateJoke = generateJoke;

  console.log('Joke generator agent initialized successfully');
  console.log('Usage: await generateJoke("programming")');

  // Example usage demonstration
  try {
    const example = await generateJoke('programming');
    console.log('Example output:', JSON.stringify(example, null, 2));
  } catch (error: unknown) {
    // Handle but don't fail on example
    const err = error as Error;
    console.log('Example generation failed:', err.message);
  }
})();
  // === End User Code ===
})();