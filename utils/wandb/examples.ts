/**
 * Wandb Utility Examples for Code Generation
 * 
 * This module provides:
 * 1. Pre-tested Node.js utility code (as strings) that gets injected into Daytona sandboxes
 * 2. API documentation for teaching the AI how to use these utilities
 * 3. Dependency lists for npm installation
 * 
 * The utilities are NOT regenerated by AI - they're copy-pasted into generated code.
 */

// ============================================================================
// Node.js Utility Code (Proven, Working, Ready to Inject)
// ============================================================================

/**
 * Wandb Chat utility for Node.js (Daytona sandboxes)
 * This is WORKING CODE that gets injected directly into generated code.
 */
export const WANDB_NODE_UTIL = `
// === Wandb Chat Utility (Auto-injected) ===
// Try to load .env file if it exists (for local runs)
// Look for .env in current dir, parent dir, and grandparent dir
try {
  require('dotenv').config({ silent: true, path: '.env' }) || 
  require('dotenv').config({ silent: true, path: '../.env' }) ||
  require('dotenv').config({ silent: true, path: '../../.env' });
} catch (e) {
  // dotenv not available or .env doesn't exist - that's okay
}

async function wandbChat(userMessage, options = {}) {
  const fetch = require('node-fetch');
  
  try {
    // Check for API key with fallback chain: INFERENCE_API_KEY → WANDB_API_KEY
    const apiKey = process.env.INFERENCE_API_KEY || process.env.WANDB_API_KEY;
    
    if (!apiKey) {
      throw new Error('INFERENCE_API_KEY or WANDB_API_KEY not found in environment');
    }
    
    // Check for inference URL with fallback to Wandb default
    const inferenceUrl = process.env.INFERENCE_URL || 'https://api.inference.wandb.ai/v1/chat/completions';
    
    const body = {
      model: options.model || process.env.AI_MODEL || 'Qwen/Qwen3-Coder-480B-A35B-Instruct',
      messages: [{ role: 'user', content: userMessage }],
    };
    
    // Add optional parameters
    if (options.systemPrompt !== undefined) {
      body.messages = [
        { role: 'system', content: options.systemPrompt },
        { role: 'user', content: userMessage }
      ];
    }
    
    const response = await fetch(inferenceUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': \`Bearer \${apiKey}\`
      },
      body: JSON.stringify(body)
    });
    
    if (!response.ok) {
      let errorText = '';
      try {
        errorText = await response.text();
      } catch (e) {
        errorText = response.statusText || 'Unknown error';
      }
      throw new Error(\`Inference API error (\${response.status}): \${errorText}\`);
    }
    
    const data = await response.json();
    
    if (!data.choices || !data.choices[0] || !data.choices[0].message) {
      throw new Error('Invalid response format from inference API');
    }
    
    return data.choices[0].message.content;
  } catch (error) {
    // Ensure we always throw a proper Error object, not a Response
    if (error instanceof Error) {
      throw error;
    }
    throw new Error(\`wandbChat error: \${String(error)}\`);
  }
}
// === End Wandb Utility ===
`.trim();

/**
 * NPM dependencies required for the wandb utility
 * Using node-fetch@2 for CommonJS compatibility in Node.js v24
 * Using dotenv for loading .env files when running locally
 */
export const WANDB_NPM_DEPS = ['node-fetch@2', 'dotenv'];

/**
 * API documentation for teaching AI how to use the utility
 * This goes into the system prompt
 */
export const WANDB_API_DOCS = `
### Available Utility: wandbChat()

⚠️ IMPORTANT: This function is PRE-LOADED and ready to use!
DO NOT import or require it - just call wandbChat() directly!

A pre-loaded utility function for making LLM inference calls:

**Function Signature:**
\`\`\`javascript
async function wandbChat(userMessage: string, options?: {
  model?: string,           // default: 'Qwen/Qwen3-Coder-480B-A35B-Instruct'
  systemPrompt?: string     // optional system prompt
}): Promise<string>
\`\`\`

**Usage Example:**
\`\`\`javascript
// Simple usage
const response = await wandbChat('What is 2+2?');
console.log(response);

// With model override
const joke = await wandbChat('Tell me a joke', {
  model: 'Qwen/Qwen3-Coder-480B-A35B-Instruct'
});
console.log(joke);

// With system prompt
const answer = await wandbChat('Explain async/await', {
  systemPrompt: 'You are a helpful coding tutor.'
});
console.log(answer);
\`\`\`

**Important:** 
- The wandbChat() function is already defined and ready to use
- Don't redefine it - just call it in your code
- WANDB_API_KEY must be set in environment variables
- Returns a Promise<string> with the LLM's response
`.trim();

/**
 * Complete example for testing/demo purposes
 */
export const WANDB_COMPLETE_EXAMPLE = `
(async () => {
  const { execSync } = require('child_process');
  
  // Install dependencies
  execSync('npm install node-fetch@2', { stdio: 'pipe' });
  
  ${WANDB_NODE_UTIL}
  
  // === Example Usage ===
  try {
    // Simple question
    const answer = await wandbChat('What is the capital of France?');
    
    console.log(JSON.stringify({
      success: true,
      answer: answer,
      timestamp: new Date().toISOString()
    }));
    
  } catch (error) {
    console.log(JSON.stringify({
      success: false,
      error: error.message,
      timestamp: new Date().toISOString()
    }));
  }
})();
`.trim();

// ============================================================================
// Utility Injection Helper
// ============================================================================

/**
 * Wrap user-generated code with the wandb utility
 * 
 * @param userCode - The code generated by AI
 * @param includeErrorHandling - Whether to wrap in try-catch (default: true)
 * @returns Complete code ready for Daytona execution
 */
export function injectWandbUtility(userCode: string, includeErrorHandling: boolean = true): string {
  const wrappedCode = includeErrorHandling 
    ? `
  try {
    ${userCode}
  } catch (error) {
    const err = error;
    console.log(JSON.stringify({
      success: false,
      error: err.message,
      timestamp: new Date().toISOString()
    }));
  }
`.trim()
    : userCode;

  return `
(async () => {
  const { execSync } = require('child_process');
  
  // Install dependencies
  execSync('npm install ${WANDB_NPM_DEPS.join(' ')}', { stdio: 'pipe' });
  
  ${WANDB_NODE_UTIL}
  
  // === Generated Code ===
  ${wrappedCode}
  // === End Generated Code ===
})();
`.trim();
}

